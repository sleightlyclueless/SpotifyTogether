/* tslint:disable */
/* eslint-disable */
/**
 * open-api-fwe
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DiaryEntry
 */
export interface DiaryEntry {
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'title': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'content': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'updatedAt': any;
}
/**
 * 
 * @export
 * @interface PostAuthLogin200Response
 */
export interface PostAuthLogin200Response {
    /**
     * 
     * @type {any}
     * @memberof PostAuthLogin200Response
     */
    'accessToken': any;
}
/**
 * 
 * @export
 * @interface PostAuthLoginRequest
 */
export interface PostAuthLoginRequest {
    /**
     * 
     * @type {any}
     * @memberof PostAuthLoginRequest
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthLoginRequest
     */
    'password'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthRegisterRequest
 */
export interface PostAuthRegisterRequest {
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'password': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'lastName': any;
}
/**
 * 
 * @export
 * @interface PostDiaryEntriesRequest
 */
export interface PostDiaryEntriesRequest {
    /**
     * 
     * @type {any}
     * @memberof PostDiaryEntriesRequest
     */
    'title': any;
    /**
     * 
     * @type {any}
     * @memberof PostDiaryEntriesRequest
     */
    'content': any;
}
/**
 * 
 * @export
 * @interface PutDiaryEntriesIdRequest
 */
export interface PutDiaryEntriesIdRequest {
    /**
     * 
     * @type {any}
     * @memberof PutDiaryEntriesIdRequest
     */
    'title'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutDiaryEntriesIdRequest
     */
    'content'?: any;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {any}
     * @memberof User
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'lastName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'dateOfBirth'?: any;
    /**
     * Set to true if the user\'s email has been verified.
     * @type {any}
     * @memberof User
     */
    'emailVerified': any;
    /**
     * The date that the user was created.
     * @type {any}
     * @memberof User
     */
    'createDate'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiaryEntriesId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDiaryEntriesId', 'id', id)
            const localVarPath = `/diaryEntries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiaryEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/diaryEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (postAuthLoginRequest?: PostAuthLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (postAuthRegisterRequest?: PostAuthRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostDiaryEntriesRequest} [postDiaryEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDiaryEntries: async (postDiaryEntriesRequest?: PostDiaryEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/diaryEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postDiaryEntriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutDiaryEntriesIdRequest} [putDiaryEntriesIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDiaryEntriesId: async (id: any, putDiaryEntriesIdRequest?: PutDiaryEntriesIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putDiaryEntriesId', 'id', id)
            const localVarPath = `/diaryEntries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putDiaryEntriesIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiaryEntriesId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDiaryEntriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiaryEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiaryEntries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(postAuthLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(postAuthRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostDiaryEntriesRequest} [postDiaryEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDiaryEntries(postDiaryEntriesRequest?: PostDiaryEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiaryEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDiaryEntries(postDiaryEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutDiaryEntriesIdRequest} [putDiaryEntriesIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDiaryEntriesId(id: any, putDiaryEntriesIdRequest?: PutDiaryEntriesIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDiaryEntriesId(id, putDiaryEntriesIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiaryEntriesId(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDiaryEntriesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiaryEntries(options?: any): AxiosPromise<any> {
            return localVarFp.getDiaryEntries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: any): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthLogin(postAuthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAuthRegister(postAuthRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostDiaryEntriesRequest} [postDiaryEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDiaryEntries(postDiaryEntriesRequest?: PostDiaryEntriesRequest, options?: any): AxiosPromise<DiaryEntry> {
            return localVarFp.postDiaryEntries(postDiaryEntriesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutDiaryEntriesIdRequest} [putDiaryEntriesIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDiaryEntriesId(id: any, putDiaryEntriesIdRequest?: PutDiaryEntriesIdRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putDiaryEntriesId(id, putDiaryEntriesIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDiaryEntriesId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDiaryEntriesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDiaryEntries(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDiaryEntries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthLogin(postAuthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthRegister(postAuthRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostDiaryEntriesRequest} [postDiaryEntriesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDiaryEntries(postDiaryEntriesRequest?: PostDiaryEntriesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postDiaryEntries(postDiaryEntriesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {PutDiaryEntriesIdRequest} [putDiaryEntriesIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDiaryEntriesId(id: any, putDiaryEntriesIdRequest?: PutDiaryEntriesIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putDiaryEntriesId(id, putDiaryEntriesIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


